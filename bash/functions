mkcd () {
    mkdir -p "$*"
    cd "$*"
}


#shot - takes a screenshot of your current window
shot () {
    import -frame -strip -quality 75 "$HOME/screen-shot_$(date +%F_%R).png"
}
#revert all changes from an SVN managed folder
svn_revert(){
    svn st | awk '{print $2}' | xargs svn revert
}

n() {
    $EDITOR ~/Dropbox/notes/"$*".txt
}

nls() {
    echo ""
    echo ""
    echo "Listing available notes"
    echo "-----------------------------"
    echo ""
    ls -c ~/Dropbox/notes/ | grep "$*"
    echo ""
}

ndel(){
  cd ~/Dropbox/notes
  if [[ -f $1.txt ]]; then
    echo "Removing $1 note"
    rm "$1.txt"
    cd -
  else
    echo "file doesn't exist"
    cd -
  fi
}

ncat(){
    cd ~/Dropbox/notes
    if [[ -f $1.txt ]]; then
      cat "$1.txt"
      cd -
    else
      echo "file doesn't exist"
      cd -
    fi
}


sshcopyid(){
    str=~/.ssh/$1.pub
    echo "str is $str"
    if [ -f $str ]
    then
        cat $str | ssh $2 "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys; chmod 700 .ssh; chmod 600 .ssh/authorized_keys"
    else
        echo "file does not exist"
    fi
}

mycalc (){
    echo "$*" | bc -l;
}

fliptable() { 
    echo "（╯°□°）╯ ┻━┻"; 
}

find_tomcat_id () {
    pid=`ps aux | grep tomcat | grep -v "grep" | grep "java" |  awk '{ print $2 }'`
    echo $pid
    return $pid
}
#find's the tomcat PID
ftc () {
    PID=`find_tomcat_id`

    if [[ $PID != "" ]] ;then
        echo "Tomcat process_id:" $PID
    else
        echo "Tomcat is not running"
    fi
}
#kill a misbehaving tomcat process
ktc () {
    PID=`find_tomcat_id`
    if [[ $PID != "" ]] ;then
        kill -9 $PID
        PID=`find_tomcat_id`
        while [[ $PID != "" ]]; do
          echo "Waiting for shutdown confirmation"
          PID=`find_tomcat_id`
        done
        echo "shutdown complete"
    else
        echo "Tomcat is not running"
    fi
}
stc (){
 $CATALINA_HOME/bin/startup.sh;tail -f $CATALINA_HOME/logs/catalina.out
}
ltc (){
 tail -f $CATALINA_HOME/logs/catalina.out
}

follow_tc(){
  tail -f $CATALINA_HOME/logs/catalina.out | egrep -vw '.*KeepAlive|meetingPoll|logCobrowsePerformance|TOUCH.*"'
}

# ------------------------------------------------------------------------------ #
# This function sets the title of the terminal-emulator
# or tab.
# ------------------------------------------------------------------------------ #
title() {
  echo -ne "\033]0;${1}\007"
}

millisec2seconds() {
  echo "scale=3; $1 / 1000" | bc;
}

gogogadget(){
      VBoxHeadless -startvm "$1" & > /dev/null
}


add_postgres_path(){
  if ! is_in_path "Postgres" 
  then
    PATH='/Applications/Postgres.app/Contents/Versions/9.3/bin':$PATH
    export PATH
  fi
}

add_java_path(){
  os=`uname`
  if [[ $os == "Linux" ]]; then
    export MAVEN_HOME=/usr/local/apache_maven
    export PATH=$PATH:$MAVEN_HOME/bin
  fi
  if [[ $os == "Darwin" ]]; then
    if ! is_in_path "Java"
    then
      #export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home
      export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_67.jdk/Contents/Home
      export MAVEN_HOME=$HOME/Library/Java/maven
      export ANT_HOME=$HOME/Library/Java/ant
      export MQ_HOME=$HOME/Library/Java/activemq
      export TOMCAT_HOME=$HOME/Library/Java/tomcat
      export CATALINA_HOME=$TOMCAT_HOME
      export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PEAR_HOME/bin:$MAVEN_HOME/bin:${PATH}:$ANDROID_HOME/tools:$ANT_HOME/bin
    fi
  fi
}

function git_ahead_behind {
    curr_branch=$(git rev-parse --abbrev-ref HEAD);
    curr_remote=$(git config branch.$curr_branch.remote);
    curr_merge_branch=$(git config branch.$curr_branch.merge | cut -d / -f 3);
    git rev-list --left-right --count $curr_branch...$curr_remote/$curr_merge_branch | tr -s '\t' '|';
}

is_in_path(){
  if [[ $PATH == *$1* ]]
  then
    return 0;
  else
    return 1;
  fi
}


restore_heroku(){
 echo "restoring heroku backup"
 echo "username :$1"
 echo "database :$2"
 echo "backup file:$3"
pg_restore --verbose --clean --no-acl --no-owner -h localhost -U $1 -d $2 $3
}

flatten(){
    echo "Flattening $1 subdirectories"
    find $1 -mindepth 2 -type f -exec mv -i '{}' $1 ';'

}

function my_public_ip {
    ip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//' | head -1
}

function color_my_prompt {
    local __user_and_host="\[\033[01;32m\]\u"
    local __cur_location="\[\033[01;34m\]\w"
    local __git_branch_color="\[\033[31m\]"
    #local __git_branch="\`ruby -e \"print (%x{git branch 2> /dev/null}.grep(/^\*/).first || '').gsub(/^\* (.+)$/, '(\1) ')\"\`"
    local __git_branch='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\ $(git_ahead_behind)\)\ /`'
    local __prompt_tail="\[\033[35m\]$"
    local __last_color="\[\033[00m\]"
    #export PS1="$__user_and_host $__cur_location $__git_branch_color$__git_branch$__prompt_tail$__last_color "
    export PS1="$__user_and_host $__cur_location $__git_branch_color$__git_branch$__prompt_tail$__last_color "
}
color_my_prompt

help-functions(){
  echo " "
  echo " "
  echo " "
  echo " List of bash functions that are available"
  echo " "
  echo " mkcd       = makes a fold ( recursive ) and cd's into that directory "
  echo " shot       = takes a screen shot"
  echo " svn_revert = reverts all svn changes in a given folder"
  echo " n          = edits a note file"
  echo " nls        = greps for a pattern in a note file"
  echo " ndel       = deletes a note file"
  echo " sshcopyid  = copy's an ssh_id.pub to a remote host"
  echo " gh         = Grep history for item then use !<num> to re-execute command"
  echo " millisec2seconds = converts milliseconds to seconds"
  echo " add_postgres_path = adds the postgres tools to the path"
  echo " add_java_path = adds the various java tools to the path"
  echo " "
  echo " "
  echo " "
}
